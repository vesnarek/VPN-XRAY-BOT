# bot/views/render.py
from __future__ import annotations
from datetime import datetime
from typing import Dict, List, Optional
from bot.settings import MONTHLY_FEE

# --- helpers -----------------------------------------------------------------

def _fmt_dt_iso(s: Optional[str]) -> str:
    if not s:
        return "‚Äî"
    try:
        return datetime.fromisoformat(s.replace("Z", "+00:00")).strftime("%Y-%m-%d %H:%M")
    except Exception:
        return s

def _device_display_name(d: Dict, idx: int = 1) -> str:
    for k in ("name", "label", "model", "title"):
        val = d.get(k)
        if isinstance(val, str) and val.strip():
            return val.strip()
    uid = (d.get("uuid") or d.get("id") or "")
    if uid:
        return f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {idx} ¬∑ ‚Ä¶{str(uid)[-6:]}"
    return f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {idx}"

def _device_status_ru(d: Dict) -> str:
    st = (d.get("status") or "active").lower()
    if st == "paused":
        return "–Ω–∞ –ø–∞—É–∑–µ"
    if st == "pending":
        return "–æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
    if st == "deleted":
        return "—É–¥–∞–ª–µ–Ω–æ"
    return "–∞–∫—Ç–∏–≤–µ–Ω"

def _daily_fee_rub() -> int:
    # ‚âà MONTHLY_FEE / 30, –º–∏–Ω–∏–º—É–º 1 ‚ÇΩ
    if not MONTHLY_FEE:
        return 0
    return max(1, round(MONTHLY_FEE / 30))

# --- –ø—É–±–ª–∏—á–Ω—ã–µ –≤—å—é—Ö–∏ ---------------------------------------------------------

def promo_text() -> str:
    return (
        "–ù–∞–¥—ë–∂–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞ –º–∏–Ω—É—Ç—É.\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN¬ª –∏ –ø–æ–ª—É—á–∏—Ç–µ 20 ‚ÇΩ (‚âà10 –¥–Ω–µ–π)."
    )

def status_and_balance_text(devices: List[Dict], balance_cents: int) -> str:

    status = "–Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
    expires = "‚Äî"
    if devices:
        devices = sorted(devices, key=lambda u: u.get("created_at", 0))
        last = devices[-1]
        status = _device_status_ru(last)
        if last.get("expires_at"):
            expires = _fmt_dt_iso(last["expires_at"])
    balance_rub = (balance_cents or 0) // 100
    daily = _daily_fee_rub()
    days_left = (balance_rub // daily) if daily > 0 else 0
    line1 = f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status}" + (f" –¥–æ {expires}" if status == "–∞–∫—Ç–∏–≤–µ–Ω" and expires != "‚Äî" else "")
    line2 = f"–ë–∞–ª–∞–Ω—Å: <b>{balance_rub} ‚ÇΩ</b>" + (f" (‚âà {days_left} –¥–Ω–µ–π)" if daily > 0 else "")
    return f"{line1}\n{line2}"

def device_card(d: Dict, idx: int = 1) -> str:
    name = _device_display_name(d, idx=idx)
    st = _device_status_ru(d)
    created = _fmt_dt_iso(d.get("created_at"))
    expires = _fmt_dt_iso(d.get("expires_at"))
    daily = _daily_fee_rub()
    parts = [
        f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {name}",
        f"–°—Ç–∞—Ç—É—Å: {st}",
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created}",
    ]
    if expires != "‚Äî":
        parts.append(f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}")
    if daily > 0:
        parts.append(f"–î–Ω–µ–≤–Ω–æ–π –ø–ª–∞—Ç—ë–∂ ‚âà {daily} ‚ÇΩ (–ø–µ—Ä–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞)")
    return "\n".join(parts)

# –ù–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–º–ø–æ—Ä—Ç–æ–º
vpn_card = device_card

def os_instruction(os_code: str) -> str:
    oc = (os_code or "").lower()
    if oc in ("ios", "iphone", "ipad"):
        return ("üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iPhone/iPad:\n\n"
                "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *v2RayTun* –∏–∑ App Store\n"
                "2) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ—ë (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞)\n"
                "3) –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´+¬ª –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É, –≤—ã–±–µ—Ä–∏—Ç–µ *–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞*\n"
                "4) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–∏—Ç—å –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n"
                "‚úÖ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    if oc == "android":
        return ("ü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android:\n\n"
                "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *v2RayTun* –∏–∑ Google Play –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                "   https://play.google.com/store/apps/details?id=com.v2raytun.android\n"
                "2) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ—ë (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞)\n"
                "3) –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´+¬ª –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É, –≤—ã–±–µ—Ä–∏—Ç–µ *–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞*\n"
                "4) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–∏—Ç—å –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n"
                "‚úÖ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    if oc == "windows":
        return ("üíª –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows:\n\n"
                "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *v2RayTun* –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                "   https://v2raytun-install.ru/v2RayTun_Setup.exe\n"
                "2) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞)\n"
                "3) –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´+¬ª –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É, –≤—ã–±–µ—Ä–∏—Ç–µ *–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞*\n"
                "4) –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
                "‚úÖ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    if oc == "macos":
        return ("üçè –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Mac:\n\n"
                "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *v2RayTun* –∏–∑ App Store\n"
                "2) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞)\n"
                "3) –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´+¬ª –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É, –≤—ã–±–µ—Ä–∏—Ç–µ *–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞*\n"
                "4) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–∏—Ç—å –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n"
                "‚úÖ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    return "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –≤—Å—Ç–∞–≤—å—Ç–µ –µ—ë –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayTun –∏ –≤–∫–ª—é—á–∏—Ç–µ VPN."


def referral_text(my_tg_id: int, bot_username: str) -> str:
    link = f"https://t.me/{bot_username}?start=ref_{my_tg_id}"
    return (
        "üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 10 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ VPN!\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1) –ü–æ–¥–µ–ª–∏—Å—å —Å –Ω–∏–º —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π\n"
        "2) –î—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –Ω–∞—á–Ω—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN\n"
        "3) –ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª—è—Ç 20 ‚ÇΩ ‚úÖ\n\n"
        f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {link}\n\n"
        "üôå –î—Ä—É–≥ —Ç–æ–∂–µ –ø–æ–ª—É—á–∏—Ç 10 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ VPN"
    )

# --- –Ω–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω -----------------------------------------------------

def main_menu_text(fullname: Optional[str], balance_cents: int, active_devices: int) -> str:
    name = fullname or "–¥—Ä—É–≥"
    balance_rub = max(0, (balance_cents or 0) // 100)

    daily_one = _daily_fee_rub()  # –æ–±—ã—á–Ω–æ 2 ‚ÇΩ
    active = max(0, active_devices)
    daily_total = daily_one * active

    if daily_total > 0:
        days_left = balance_rub // daily_total
    else:
        days_left = balance_rub // daily_one if daily_one > 0 else 0

    return (
        f"–ü—Ä–∏–≤–µ—Ç, {name} üëã\n\n"
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å: {balance_rub}‚ÇΩ ({days_left} –¥–Ω–µ–π)</b>\n\n"
        f"–¢–∞—Ä–∏—Ñ: {daily_one}‚ÇΩ/–¥–µ–Ω—å –∑–∞ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
        f"–¢–µ–∫—É—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {daily_total}‚ÇΩ/–¥–µ–Ω—å\n\n"
        "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN? üõ†\n"
        "–ì–ª–∞–≤–Ω–∞—è ‚Üí –ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Üí –û–±–Ω–æ–≤–∏—Ç—å\n\n"
        "–ö–ª—é—á –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n"
        "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN.\n\n"
        "üôã‚Äç‚ôÇÔ∏è –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 10 –¥–Ω–µ–π (20‚ÇΩ) üôã‚Äç‚ôÄÔ∏è"
    )

