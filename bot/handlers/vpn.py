import asyncio
import logging
from aiogram import Router, F, types
from aiogram.exceptions import TelegramNetworkError, TelegramRetryAfter
import time
from bot.keyboards.common import (
    os_kb,
    first_buy_kb,
    confirm_buy_kb,
    devices_list_kb,
    back_kb,
    device_actions_basic_kb,
    key_actions_kb
)
from bot.views.render import os_instruction
from bot.services import api, db
from bot.settings import DEFAULT_DAYS, MONTHLY_FEE, API_URL
from bot.settings import MAX_DEVICES_PER_USER

router = Router()

_REFRESH_READY: dict[tuple[int, str], float] = {}


async def safe_edit(msg: types.Message, text: str, retries: int = 3, **kwargs):
    for _ in range(retries):
        try:
            return await msg.edit_text(text, **kwargs)
        except TelegramRetryAfter as e:
            await asyncio.sleep(int(getattr(e, "retry_after", 1)) + 1)
        except TelegramNetworkError:
            await asyncio.sleep(1)
        except Exception:
            break
    try:
        return await msg.answer(text, **kwargs)
    except Exception:
        return None

async def safe_answer(cq: types.CallbackQuery, text: str = "", show_alert: bool = False):
    try:
        await cq.answer(text=text, show_alert=show_alert)
    except TelegramNetworkError:
        pass
    except Exception:
        pass



async def _user_devices(tg_id: int) -> list[dict]:
    return db.list_devices(tg_id)

def _next_device_name(os_code: str, existing: list[dict], uuid: str | None = None) -> str:

    base = "iOS" if os_code.lower() == "ios" else os_code.capitalize()


    suffix = ""
    if uuid:
        tail = uuid.replace("-", "")[-4:]
        suffix = f" {tail.upper()}"

    used = {str(u.get("name", "")).strip() for u in existing}

    cand = f"{base}{suffix}"
    if cand not in used:
        return cand

    i = 1
    while True:
        cand = f"{base}{suffix} ({i})"
        if cand not in used:
            return cand
        i += 1

def _find_device_local(device_id: str, tg_id: int) -> dict | None:
    try:
        d = db.device_by_uuid(device_id)
        if d and d.get("tg_id") == tg_id and d.get("status") != "deleted":
            return d
    except Exception:
        pass
    for field in ("id", "name"):
        try:
            with db.db() as con:
                r = con.execute(
                    f"SELECT * FROM devices WHERE {field}=? AND tg_id=? AND status!='deleted'",
                    (int(device_id) if field == "id" else device_id, tg_id)
                ).fetchone()
                if r:
                    return dict(r)
        except Exception:
            pass
    return None



@router.callback_query(F.data == "vpn_setup")
async def vpn_setup(cq: types.CallbackQuery):
    await safe_edit(cq.message, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=os_kb())
    await safe_answer(cq)

@router.callback_query(F.data.startswith("os_"))
async def choose_os(cq: types.CallbackQuery):
    os_code = cq.data.split("_", 1)[1]
    devices = await _user_devices(cq.from_user.id)
    bal_rub = await api.get_balance(cq.from_user.id)
    need = 2 * (len(devices) + 1)
    afford = bal_rub >= need

    # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –û–° + —ç–º–æ–¥–∑–∏
    os_l = os_code.lower()
    platform = "iOS" if os_l == "ios" else ("macOS" if os_l == "macos" else os_code.capitalize())
    emoji = "üçé" if platform in ("iOS", "macOS") else ("üñ•" if platform == "Windows" else ("ü§ñ" if platform == "Android" else ""))

    # –¥–Ω–µ–≤–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ MONTHLY_FEE (–æ–∫—Ä—É–≥–ª—è–µ–º ‚âà2 ‚ÇΩ/–¥–µ–Ω—å)
    daily_rub = max(1, round(MONTHLY_FEE / 30))

    text = (
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
        f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {platform}{(' ' + emoji) if emoji else ''}\n"
        f"–¢–∞—Ä–∏—Ñ: {daily_rub}‚ÇΩ/–¥–µ–Ω—å"
    )

    kb = first_buy_kb(afford, MONTHLY_FEE)
    for row in kb.inline_keyboard:
        for btn in row:
            if btn.callback_data == "buy":
                btn.callback_data = f"confirm_buy:{os_code}"

    await safe_edit(cq.message, text, reply_markup=kb)
    await safe_answer(cq)



@router.callback_query(F.data.startswith("confirm_buy:"))
async def buy_create(cq: types.CallbackQuery):
    os_code = cq.data.split(":", 1)[1]
    devices = await _user_devices(cq.from_user.id)

    if len(devices) >= MAX_DEVICES_PER_USER:
        await safe_edit(
            cq.message,
            (
                "üì± <b>–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\n"
                f"–ú–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_DEVICES_PER_USER} —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n"
                "–£–¥–∞–ª–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ."
            ),
            parse_mode="HTML",
            reply_markup=back_kb()
        )
        await safe_answer(cq)
        return

    created = await api.create_user(f"tg_{cq.from_user.id}", DEFAULT_DAYS)
    logging.info(f"[buy_create] API create_user -> {created}")

    if not isinstance(created, dict) or created.get("_error"):
        await safe_edit(cq.message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á. {created.get('_error','')}", reply_markup=back_kb())
        await safe_answer(cq)
        return

    sub_link   = created.get("sub_link")
    sub_id     = (created.get("sub_id") or "").strip()
    uuid_      = (created.get("uuid") or "").strip()
    expires_at = (created.get("expires_at") or "").strip()
    server_base = (created.get("_server") or "").strip()

    if not sub_link or not uuid_:
        await safe_edit(cq.message, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É/UUID.", reply_markup=back_kb())
        await safe_answer(cq)
        return

    name = _next_device_name(os_code, devices, uuid_)

    logging.info(f"[buy_create] Creating device name={name} for uuid={uuid_}")

    try:
        db.add_device(
            tg_id=cq.from_user.id,
            uuid=uuid_,
            name=name,
            os=("iOS" if os_code.lower() == "ios" else os_code.capitalize()),
            status="active",
            expires_at=expires_at,
            sub_id=(sub_id or None),
            server_base=(server_base or None)
        )
    except ValueError as e:
        if str(e) == "device_limit_reached":
            await safe_edit(
                cq.message,
                (
                    "üì± <b>–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\n"
                    f"–ú–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_DEVICES_PER_USER} —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n"
                    "–£–¥–∞–ª–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ."
                ),
                parse_mode="HTML",
                reply_markup=back_kb()
            )
            await safe_answer(cq)
            return
        logging.exception(f"[buy_create] DB add_device failed: {e}")
        await safe_edit(cq.message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=back_kb())
        await safe_answer(cq)
        return

    ident = sub_id or uuid_
    sub = f"{API_URL.rstrip('/')}/sub/{ident}?b64=1"
    text = os_instruction(os_code) + f"\n\n<b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>\n<code>{sub}</code>"
    done_kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ!", callback_data="home")]
        ]
    )
    await safe_edit(cq.message, text, parse_mode="HTML", reply_markup=done_kb)
    await safe_answer(cq)



@router.callback_query(F.data == "devices")
async def devices_list(cq: types.CallbackQuery):
    try:
        devices = await _user_devices(cq.from_user.id)
    except Exception:
        devices = []

    kb = devices_list_kb(devices)

    limit = MAX_DEVICES_PER_USER
    reached = len(devices) >= limit

    if devices:
        text = (
            "üì± <b>–í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ.\n\n"
            f"üë• –ú–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ {limit} —É—Å—Ç—Ä–æ–π—Å—Ç–≤."
            + ("\n‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –£–¥–∞–ª–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ." if reached else "")
            + "\n\nüí≥ –¢–∞—Ä–∏—Ñ ‚Äî 60 ‚ÇΩ –≤ –º–µ—Å—è—Ü –∑–∞ –∫–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n"
            "‚ö†Ô∏è –ï—Å–ª–∏ VPN —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ–±–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."
        )
    else:
        text = (
            "üì± <b>–í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ¬ª, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.\n\n"
            f"üë• –ú–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ {limit} —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n"
            "üí≥ –¢–∞—Ä–∏—Ñ ‚Äî 60 ‚ÇΩ –≤ –º–µ—Å—è—Ü –∑–∞ –∫–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."
        )

    await safe_edit(cq.message, text, parse_mode="HTML", reply_markup=kb)
    await safe_answer(cq)



@router.callback_query(F.data.regexp(r"^dev:.+?:open$"))
async def dev_open(cq: types.CallbackQuery):
    _, dev_id, _ = cq.data.split(":", 2)
    d = _find_device_local(dev_id, cq.from_user.id)
    if not d:
        await safe_answer(cq, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    name   = (d.get("name") or d.get("label") or "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ").strip()
    status = (d.get("status") or "‚Äî").strip()

    uuid_  = (d.get("uuid") or "").strip()
    sub_id = (d.get("sub_id") or "").strip()
    ident  = (sub_id or uuid_).strip()

    if not ident:
        await safe_edit(
            cq.message,
            "‚ö†Ô∏è –£ —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=devices_list_kb(await _user_devices(cq.from_user.id))
        )
        await safe_answer(cq)
        return

    sub = f"{API_URL.rstrip('/')}/sub/{ident}?b64=1"

    text = (
        f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <b>{name}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
        f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n<code>{sub}</code>\n\n"
        "–£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–∂–Ω–æ –Ω–µ —Ä–∞–Ω–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n"
        "–ï—Å–ª–∏ VPN –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª. "
        "–ö–ª—é—á –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. "
        "–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN."
    )

    actual_id = str(uuid_ or d.get("id") or d.get("name") or dev_id)
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º activated_at –∏–ª–∏ created_at (—á—Ç–æ –µ—Å—Ç—å)
    created_or_activated_at = int(d.get("activated_at") or d.get("created_at") or 0)

    await safe_edit(
        cq.message,
        text,
        parse_mode="HTML",
        reply_markup=device_actions_basic_kb(actual_id, created_or_activated_at)
    )
    await safe_answer(cq)



@router.callback_query(F.data.regexp(r"^dev:.+?:key$"))
async def dev_key(cq: types.CallbackQuery):
    _, dev_id, _ = cq.data.split(":", 2)
    d = _find_device_local(dev_id, cq.from_user.id)
    if not d:
        await safe_answer(cq, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    uuid_  = (d.get("uuid") or "").strip()
    sub_id = (d.get("sub_id") or "").strip()
    if not uuid_ and not sub_id:
        await safe_edit(
            cq.message,
            "‚ö†Ô∏è –£ —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.",
            reply_markup=devices_list_kb(await _user_devices(cq.from_user.id))
        )
        await safe_answer(cq)
        return

    ident = sub_id or uuid_
    sub = f"{API_URL.rstrip('/')}/sub/{ident}?b64=1"
    text = os_instruction((d.get("os") or "").lower()) + f"\n\n<b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>\n<code>{sub}</code>"

    await safe_edit(
        cq.message,
        text,
        parse_mode="HTML",
        reply_markup=key_actions_kb(uuid_ or ident)
    )
    await safe_answer(cq)


@router.callback_query(F.data.regexp(r"^dev:.+?:refresh$"))
async def dev_refresh(cq: types.CallbackQuery):
    _, dev_id, _ = cq.data.split(":", 2)
    d = _find_device_local(dev_id, cq.from_user.id)
    if not d:
        await safe_answer(cq, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    uuid_cur = (d.get("uuid") or "").strip()
    sub_id   = (d.get("sub_id") or "").strip()


    key = (cq.from_user.id, str(d.get("uuid") or d.get("id") or dev_id))
    now = time.time()
    ready_until = _REFRESH_READY.get(key, 0)
    if now > ready_until:
        _REFRESH_READY[key] = now + 90  # –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 90 —Å–µ–∫
        await safe_answer(
            cq,
            "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–ª—é—á–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ VPN –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n\n"
            "–ö–æ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥¬ª –µ—â—ë —Ä–∞–∑.",
            show_alert=True
        )
        return


    if not sub_id and uuid_cur:
        try:
            sub_found = await api.resolve_sub_id_from_uuid(uuid_cur)
        except Exception:
            sub_found = None
        if sub_found:
            sub_id = sub_found
            try:
                with db.db() as con:
                    con.execute("UPDATE devices SET sub_id=? WHERE id=?", (sub_id, d["id"]))
                    con.commit()
            except Exception:
                pass

    if not sub_id:
        _REFRESH_READY.pop(key, None)
        await safe_answer(cq, "sub_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.", show_alert=True)
        return

    resp = await api.refresh_by_sub_id(sub_id)
    if isinstance(resp, dict) and resp.get("_error"):
        _REFRESH_READY.pop(key, None)
        await safe_answer(cq, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {resp['_error']}", show_alert=True)
        return

    new_uuid = ""
    if isinstance(resp, dict):
        new_uuid = (resp.get("uuid") or "").strip()

    if new_uuid and new_uuid != uuid_cur:
        try:
            with db.db() as con:
                con.execute("UPDATE devices SET uuid=? WHERE id=?", (new_uuid, d["id"]))
                con.execute(
                    "INSERT INTO events(tg_id, type, payload, created_at) VALUES(?,?,?,?)",
                    (cq.from_user.id, "refresh", f"old={uuid_cur} new={new_uuid}", int(time.time()))
                )
                con.commit()
        except Exception as e:
            logging.exception(f"[dev_refresh] DB write failed: {e}")


    _REFRESH_READY.pop(key, None)

    d = db.device_by_id(d["id"]) or d
    name   = (d.get("name") or d.get("label") or "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ").strip()
    status = (d.get("status") or "‚Äî").strip()
    uuid_now = (d.get("uuid") or uuid_cur or "").strip()
    sub_id   = (d.get("sub_id") or "").strip()
    ident    = (sub_id or uuid_now).strip()
    sub_link = f"{API_URL.rstrip('/')}/sub/{ident}?b64=1"

    text = (
        f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <b>{name}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
        f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n<code>{sub_link}</code>\n\n"
        "–£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–∂–Ω–æ –Ω–µ —Ä–∞–Ω–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n"
        "–ï—Å–ª–∏ VPN –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª. "
        "–ö–ª—é—á –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. "
        "–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN."
    )

    actual_id = str(uuid_now or d.get("id") or d.get("name") or dev_id)
    created_or_activated_at = int(d.get("activated_at") or d.get("created_at") or 0)

    await safe_answer(cq, "‚úÖ –ö–æ–Ω—Ñ–∏–≥ –æ–±–Ω–æ–≤–ª—ë–Ω! –û–±–Ω–æ–≤–∏—Ç–µ VPN –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", show_alert=True)
    await safe_edit(
        cq.message,
        text,
        parse_mode="HTML",
        reply_markup=device_actions_basic_kb(actual_id, created_or_activated_at)
    )



@router.callback_query(F.data.regexp(r"^dev:.+?:delete$"))
async def dev_delete(cq: types.CallbackQuery):
    _, dev_id, _ = cq.data.split(":", 2)
    d = _find_device_local(dev_id, cq.from_user.id)
    if not d:
        await safe_answer(cq, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ", show_alert=True)
        return
    uuid_ = (d.get("uuid") or "").strip()
    try:
        await api.revoke(uuid_)
    except Exception:
        pass
    db.set_device_status(uuid_, "deleted")
    devices = await _user_devices(cq.from_user.id)
    await safe_edit(
        cq.message,
        "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:" if devices else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤.",
        reply_markup=devices_list_kb(devices)
    )
    await safe_answer(cq)
